import { NextRequest, NextResponse } from 'next/server';
import Replicate from 'replicate';
import { supabase } from '../supabase';
import { auth } from '@clerk/nextjs/server';

export async function POST(req: NextRequest) {
  try {
    // Clerk authentication
    const { userId } = await auth();
    console.log('Clerk userId:', userId); // Debug log
    if (!userId) {
      return NextResponse.json({ error: 'Not authenticated.' }, { status: 401 });
    }

    // Fetch user credits from Supabase
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('credits')
      .eq('id', userId)
      .single();
    if (userError || !user) {
      return NextResponse.json({ error: 'User not found in credits database.' }, { status: 403 });
    }
    if (user.credits < 20) {
      return NextResponse.json({ error: 'Insufficient credits.' }, { status: 403 });
    }

    // Deduct 20 credits atomically
    const { error: updateError } = await supabase
      .from('users')
      .update({ credits: user.credits - 20 })
      .eq('id', userId);
    if (updateError) {
      return NextResponse.json({ error: 'Failed to deduct credits.' }, { status: 500 });
    }

    const body = await req.json();
    const { prompt, aspect_ratio } = body || {};
    if (!prompt || typeof prompt !== 'string' || !prompt.trim()) {
      return NextResponse.json({ error: 'Please enter a prompt.' }, { status: 400 });
    }

    const ratio = typeof aspect_ratio === 'string' && aspect_ratio ? aspect_ratio : '3:4';

    const replicateApiToken = process.env.REPLICATE_API_TOKEN;
    if (!replicateApiToken) {
      return NextResponse.json({ error: 'Replicate API token not configured.' }, { status: 500 });
    }

    const replicate = new Replicate({ auth: replicateApiToken });

    let output: any;
    try {
      const controller = new AbortController();
      const timeout = setTimeout(() => controller.abort(), 60000);

      output = await replicate.run('minimax/image-01', {
        input: {
          prompt,
          aspect_ratio: ratio,
        },
        signal: controller.signal,
      });

      clearTimeout(timeout);
    } catch (modelErr: any) {
      console.error('Replicate model error:', modelErr);
      if (modelErr.name === 'AbortError') {
        return NextResponse.json({ error: 'Image generation timed out. Please try again.' }, { status: 504 });
      }
      return NextResponse.json({ error: 'Failed to generate image from Replicate.', details: modelErr?.message || modelErr }, { status: 502 });
    }

    // Log the output for debugging
    console.log('Replicate output:', output);

    // --- Robustly handle all output types ---
    let images: string[] = [];
    if (output && Array.isArray(output)) {
      images = await Promise.all(output.map(async (item: any) => {
        if (typeof item === 'string' && item.startsWith('http')) {
          return item;
        }
        if (item && typeof item.getReader === 'function') {
          // ReadableStream
          const reader = item.getReader();
          let chunks: Uint8Array[] = [];
          let done = false;
          while (!done) {
            const { value, done: doneReading } = await reader.read();
            if (value) chunks.push(value);
            done = doneReading;
          }
          const blob = Buffer.concat(chunks);
          return `data:image/jpeg;base64,${blob.toString('base64')}`;
        }
        return '';
      }));
    } else if (output && Array.isArray(output.output)) {
      images = output.output.filter((url: any) => typeof url === 'string' && url.startsWith('http'));
    }

    images = images.filter(Boolean);

    if (!images.length) {
      return NextResponse.json({ error: 'No images generated by model. Try a different prompt.' }, { status: 502 });
    }

    // Insert thumbnail history for the first image
    try {
      const { error: insertError } = await supabase
        .from('thumbnail_history')
        .insert({
          user_id: userId,
          image_url: images[0],
          created_at: new Date().toISOString(),
        });
      if (insertError) {
        console.error('Supabase thumbnail_history insert error:', insertError);
      } else {
        console.log('Inserted thumbnail_history for user:', userId, images[0]);
      }
    } catch (err) {
      console.error('Exception inserting thumbnail_history:', err);
    }

    return NextResponse.json({ images }, { status: 200 });
  } catch (err: any) {
    console.error('API route error:', err);
    return NextResponse.json({ error: 'Internal server error. Please try again later.' }, { status: 500 });
  }
} 